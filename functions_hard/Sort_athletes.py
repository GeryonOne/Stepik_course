"""
Список athletes содержит сведения о спортсменах в виде кортежей: (имя, возраст, рост, вес).

Напишите программу сортировки списка спортсменов по указанному полю:

1: по имени;
2: по возрасту;
3: по росту;
4: по весу.

Формат входных данных
На вход программе подается натуральное число от 1 до 4 – номер поля по которому требуется отсортировать список.

Формат выходных данных
Программа должна вывести отсортированный по заданному полю список в соответствии с примерами.
"""""


# Определение функции main, которая принимает sort_value и возвращает функцию get_data
def main(sort_value):
    # Уменьшаем sort_value на 1 (возможно, для коррекции индексации)
    sort_value = sort_value - 1

    # Определение вложенной функции get_data, которая принимает person и возвращает значение person[sort_value]
    def get_data(person):
        return person[sort_value]

    # Возвращаем функцию get_data
    return get_data


# Определение функции sort_athletes
def sort_athletes():
    # Получение значения sort_value от пользователя и передача его в функцию main
    data_func = main(int(input()))

    # Список атлетов с их данными
    athletes = [('Дима', 10, 130, 35), ('Тимур', 11, 135, 39), ('Руслан', 9, 140, 33), ('Рустам', 10, 128, 30),
                ('Амир', 16, 170, 70), ('Рома', 16, 188, 100), ('Матвей', 17, 168, 68), ('Петя', 15, 190, 90)]

    # Сортировка атлетов с использованием функции data_func в качестве ключа
    sorted_athletes = (sorted(athletes, key=data_func))

    # Вызов функции print_athletes для вывода отсортированного списка
    print_athletes(sorted_athletes)


# Определение функции print_athletes, которая выводит данные отсортированных атлетов
def print_athletes(sorted_athletes):
    for person in sorted_athletes:
        print(f'{person[0]} {person[1]} {person[2]} {person[3]}')


# Вызов функции sort_athletes для выполнения сортировки и вывода результатов
sort_athletes()
